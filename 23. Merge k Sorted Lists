# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        merged_lists = []
        if len(lists) == 1:
            return lists[0]
        elif len(lists) == 0:
            return None

        for i in range(0, len(lists), 2):
            a = lists[i]
            b = None if i + 1 == len(lists) else lists[i + 1]
            merged_lists.append(self.merge2Lists(a, b))
        
        return self.mergeKLists(merged_lists)
        
        
    def merge2Lists(self, a, b):
        if b is None or b.val is None:
            return a
        if a is None or a.val is None:
            return b
        #print(a, b)
        if a.val <= b.val:
            head = a
            a = a.next
        else:
            head = b
            b = b.next
        tail = head
        
        while a and b:
            if a.val <= b.val:
                tail.next = a
                a = a.next
            else:
                tail.next = b
                b = b.next
            tail = tail.next
            
        if a:
            tail.next = a
        if b:
            tail.next = b
        
        return head
        
        
        
